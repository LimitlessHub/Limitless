import { Toaster } from "@/components/ui/toaster";
import { Toaster as Sonner } from "@/components/ui/sonner";
import { TooltipProvider } from "@/components/ui/tooltip";
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import { BrowserRouter, Routes, Route } from "react-router-dom";
import { HelmetProvider } from 'react-helmet-async';
import { LanguageProvider } from "@/contexts/LanguageContext";
import Index from "./pages/Index";
import About from "./pages/About";
import Contact from "./pages/Contact";
import ServicePage from "./pages/ServicePage";
import SaudiArabia from "./pages/SaudiArabia";
import UAE from "./pages/UAE";
import Kuwait from "./pages/Kuwait";
import Egypt from "./pages/Egypt";
import PrivacyPolicy from "./pages/PrivacyPolicy";
import TermsConditions from "./pages/TermsConditions";
import NotFound from "./pages/NotFound";
import CityPage from "./pages/CityPage";
import ServicesListPage from "./pages/ServicesListPage";
import GenericServicePage from "./pages/GenericServicePage";

const queryClient = new QueryClient();

// Data-driven route configuration
const routeConfig = [
  { path: "/", element: <Index /> },
  { path: "/about", element: <About /> },
  { path: "/contact", element: <Contact /> },
  { path: "/sa", element: <SaudiArabia /> },
  { path: "/ae", element: <UAE /> },
  { path: "/kw", element: <Kuwait /> },
  { path: "/eg", element: <Egypt /> },
  { path: "/services", element: <ServicesListPage /> },
  { path: "/services/:service", element: <GenericServicePage /> },
  { path: "/:country/:city", element: <CityPage /> },
  { path: "/privacy-policy", element: <PrivacyPolicy /> },
  { path: "/terms-conditions", element: <TermsConditions /> },
  { path: "/:country/:city/:service", element: <ServicePage /> },
  { path: "*", element: <NotFound /> },
];

const App = () => (
  <QueryClientProvider client={queryClient}>
    <HelmetProvider>
      <TooltipProvider>
        <LanguageProvider>
          <Toaster />
          <Sonner />
          <BrowserRouter>
            <Routes>
              {routeConfig.map((route, index) => (
                <Route key={index} path={route.path} element={route.element} />
              ))}
            </Routes>
          </BrowserRouter>
        </LanguageProvider>
      </TooltipProvider>
    </HelmetProvider>
  </QueryClientProvider>
);

export default App;
